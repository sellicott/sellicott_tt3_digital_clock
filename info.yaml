--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
source_files:        
   - sellicott_digital_clock.v 
   - design_wrapper_v1.v
   - time_register.v
   - hours_register2.v
   - minutes_seconds_register.v
   - bcd_register.v
   - output_wrapper.v
   - digit_shift_register.v
   - shift_register_controller.v
   - bcd_segment_mux.v
   - bcd_to_7seg.v
top_module: "sellicott_digital_clock"

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Samuel Ellicott" # Your name
  title:        "Digital Clock"   # Project title
  language:     "Verilog"         # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Simple digital clock that supports 12h and 24h time formats"  # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
     Simple digital clock, displays hours, minutes, and seconds in either a 12h or a 24h format
     (selectable by user input). Since there are not enough output pins to directly drive a 6x
     7-segment displays, the data is shifted out serially using an internal 8-bit shift register.
     The shift register drives 6-external 74xx596 shift registers to the displays. Clock and control
     signals (`clk_out`, `latch_out`) are also used to shift and latch the data into the external 
     shift registers respectively. The time can be set using the `set_hours` and `set_minutes` inputs.
     If `set_fast` is high, then the the hours or minutes will be incremented at a rate of 5Hz, 
     otherwise it will be set at a rate of 1Hz. Note that when setting either the minutes, rolling-over
     will not affect the hours setting.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project

# A description of what the inputs do
  inputs:               
    - clock (12.5Khz)
    - 12h / 24h
    - set_fast 1Hz/5Hz
    - set_hours
    - set_minutes
    - none
    - none
    - none
# A description of what the outputs do
  outputs:
    - serial out
    - latch out
    - serial clock out
    - AM / PM 
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "clock, bcd, shift-register, 7-segment-display"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "Requires 6 74xx596(?) shift registers to output data to a set of 7-segment displays"      # Describe any external hardware needed
  discord:      "sellicott#9284"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/sellicott/sellicott_tt3_digital_clock"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     12500   # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
